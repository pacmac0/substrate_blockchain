{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];\nconst ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Result', 'Option', 'UInt']);\nconst BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nconst mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>\nremoveBounded(), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias('String', 'Text'), // alias Vec<u8> -> Bytes\nalias('Vec<u8>', 'Bytes'), alias('&\\\\[u8\\\\]', 'Bytes'), alias(\"&'static\\\\[u8\\\\]\", 'Bytes'), // alias RawAddress -> Address\nalias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  let depth = 0;\n\n  for (let index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);\n}\nexport function alias(src, dest, withChecks = true) {\n  return value => value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);\n}\nexport function cleanupCompact() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        const end = findClosing(value, index + 1) - 14;\n\n        if (value.substr(end, 14) === ' as HasCompact') {\n          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;\n        }\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return value => value.replace(/\\(([^,]+)\\)/, '$1');\n}\n\nfunction replaceTagWith(value, matcher, replacer) {\n  let index = -1;\n\n  while (true) {\n    index = value.indexOf(matcher, index + 1);\n\n    if (index === -1) {\n      return value;\n    }\n\n    const start = index + matcher.length;\n    const end = findClosing(value, start);\n    value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;\n  }\n} // remove the Bounded* wrappers\n\n\nexport function removeBounded() {\n  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `Bounded${tag}<`, inner => {\n    const parts = inner.split(',');\n    return `${tag}<${parts.filter((_, i) => i !== parts.length - 1).join(',')}>`;\n  }), value);\n}\nexport function removeColons() {\n  return (value, {\n    allowNamespaces\n  } = {}) => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        let start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        const box = ALLOWED_BOXES.find(box => {\n          const start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          const end = findClosing(value, index + 1);\n          value = `${value.substr(0, index)}${value.substr(end + 1)}`;\n        }\n      }\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  const replacer = inner => `(${inner},${inner})`;\n\n  return value => replaceTagWith(value, 'PairOf<', replacer);\n} // remove the type traits\n\nexport function removeTraits() {\n  return value => value // remove all whitespaces\n  .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n  .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n  .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n  .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n  .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n  .replace(/::Type/g, '');\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(check) {\n  const replacer = inner => inner;\n\n  return value => replaceTagWith(value, check, replacer);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce((result, fn) => fn(result, options), value.toString()).trim();\n}","map":{"version":3,"sources":["/Users/pacmac/Documents/GitHub/Blockchain/substarte_blockchain/substrate-front-end-template/node_modules/@polkadot/types/create/sanitize.js"],"names":["BOUNDED","ALLOWED_BOXES","concat","BOX_PRECEDING","mappings","alias","cleanupCompact","removeBounded","removeTraits","removePairOf","removeWrap","removeGenerics","flattenSingleTuple","removeColons","findClosing","value","start","depth","index","length","Error","src","dest","withChecks","replace","RegExp","map","box","join","includes","end","substr","replaceTagWith","matcher","replacer","indexOf","reduce","tag","inner","parts","split","filter","_","i","allowNamespaces","find","check","sanitize","options","result","fn","toString","trim"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,EAAoC,KAApC,CAAhB;AACA,MAAMC,aAAa,GAAGD,OAAO,CAACE,MAAR,CAAe,CAAC,SAAD,EAAY,gBAAZ,EAA8B,KAA9B,EAAqC,SAArC,EAAgD,QAAhD,EAA0D,QAA1D,EAAoE,MAApE,CAAf,CAAtB;AACA,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAtB,C,CAAsD;;AAEtD,MAAMC,QAAQ,GAAG,CAAC;AAClBC,KAAK,CAAC,+DAAD,EAAkE,uBAAlE,EAA2F,KAA3F,CADY,EACuFA,KAAK,CAAC,WAAD,EAAc,MAAd,EAAsB,KAAtB,CAD5F,EAC0H;AAC3IC,cAAc,EAFG,EAEC;AAClBC,aAAa,EAHI,EAGA;AACjBC,YAAY,EAJK,EAID;AAChBC,YAAY,EALK,EAKD;AAChBC,UAAU,CAAC,MAAD,CANO,EAMG;AACpBC,cAAc,EAPG,EAOC;AAClBN,KAAK,CAAC,QAAD,EAAW,MAAX,CARY,EAQQ;AACzBA,KAAK,CAAC,SAAD,EAAY,OAAZ,CATY,EASUA,KAAK,CAAC,WAAD,EAAc,OAAd,CATf,EASuCA,KAAK,CAAC,kBAAD,EAAqB,OAArB,CAT5C,EAS2E;AAC5FA,KAAK,CAAC,YAAD,EAAe,SAAf,CAVY,EAUe;AAChCA,KAAK,CAAC,gBAAD,EAAmB,cAAnB,CAXY,EAWwBA,KAAK,CAAC,gBAAD,EAAmB,cAAnB,CAX7B,EAWiE;AAClFA,KAAK,CAAC,kBAAD,EAAqB,oBAArB,CAZY,EAYgC;AACjDO,kBAAkB,EAbD,EAaK;AACtBC,YAAY,EAdK,CAAjB,C,CAciB;;AAEjB,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACxC,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,KAAK,GAAGF,KAAjB,EAAwBE,KAAK,GAAGH,KAAK,CAACI,MAAtC,EAA8CD,KAAK,EAAnD,EAAuD;AACrD,QAAIH,KAAK,CAACG,KAAD,CAAL,KAAiB,GAArB,EAA0B;AACxB,UAAI,CAACD,KAAL,EAAY;AACV,eAAOC,KAAP;AACD;;AAEDD,MAAAA,KAAK;AACN,KAND,MAMO,IAAIF,KAAK,CAACG,KAAD,CAAL,KAAiB,GAArB,EAA0B;AAC/BD,MAAAA,KAAK;AACN;AACF;;AAED,QAAM,IAAIG,KAAJ,CAAW,0CAAyCL,KAAM,YAAWC,KAAM,GAA3E,CAAN;AACD;AACD,OAAO,SAASX,KAAT,CAAegB,GAAf,EAAoBC,IAApB,EAA0BC,UAAU,GAAG,IAAvC,EAA6C;AAClD,SAAOR,KAAK,IAAIA,KAAK,CAACS,OAAN,CAAc,IAAIC,MAAJ,CAAY,KAAIJ,GAAI,IAAGlB,aAAa,CAACuB,GAAd,CAAkBC,GAAG,IAAK,KAAIA,GAAI,GAAEN,GAAI,EAAxC,EAA2CO,IAA3C,CAAgD,GAAhD,CAAqD,GAA5E,EAAgF,GAAhF,CAAd,EAAoGP,GAAG,IAAIE,UAAU,IAAIpB,aAAa,CAAC0B,QAAd,CAAuBR,GAAG,CAAC,CAAD,CAA1B,CAAd,GAAgD,GAAEA,GAAG,CAAC,CAAD,CAAI,GAAEC,IAAK,EAAhE,GAAoEA,IAA/K,CAAhB;AACD;AACD,OAAO,SAAShB,cAAT,GAA0B;AAC/B,SAAOS,KAAK,IAAI;AACd,SAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,KAAK,CAACI,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjD,UAAIH,KAAK,CAACG,KAAD,CAAL,KAAiB,GAArB,EAA0B;AACxB,cAAMY,GAAG,GAAGhB,WAAW,CAACC,KAAD,EAAQG,KAAK,GAAG,CAAhB,CAAX,GAAgC,EAA5C;;AAEA,YAAIH,KAAK,CAACgB,MAAN,CAAaD,GAAb,EAAkB,EAAlB,MAA0B,gBAA9B,EAAgD;AAC9Cf,UAAAA,KAAK,GAAI,WAAUA,KAAK,CAACgB,MAAN,CAAab,KAAK,GAAG,CAArB,EAAwBY,GAAG,GAAGZ,KAAN,GAAc,CAAtC,CAAyC,GAA5D;AACD;AACF;AACF;;AAED,WAAOH,KAAP;AACD,GAZD;AAaD;AACD,OAAO,SAASH,kBAAT,GAA8B;AACnC,SAAOG,KAAK,IAAIA,KAAK,CAACS,OAAN,CAAc,aAAd,EAA6B,IAA7B,CAAhB;AACD;;AAED,SAASQ,cAAT,CAAwBjB,KAAxB,EAA+BkB,OAA/B,EAAwCC,QAAxC,EAAkD;AAChD,MAAIhB,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,IAAP,EAAa;AACXA,IAAAA,KAAK,GAAGH,KAAK,CAACoB,OAAN,CAAcF,OAAd,EAAuBf,KAAK,GAAG,CAA/B,CAAR;;AAEA,QAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,aAAOH,KAAP;AACD;;AAED,UAAMC,KAAK,GAAGE,KAAK,GAAGe,OAAO,CAACd,MAA9B;AACA,UAAMW,GAAG,GAAGhB,WAAW,CAACC,KAAD,EAAQC,KAAR,CAAvB;AACAD,IAAAA,KAAK,GAAI,GAAEA,KAAK,CAACgB,MAAN,CAAa,CAAb,EAAgBb,KAAhB,CAAuB,GAAEgB,QAAQ,CAACnB,KAAK,CAACgB,MAAN,CAAaf,KAAb,EAAoBc,GAAG,GAAGd,KAA1B,CAAD,CAAmC,GAAED,KAAK,CAACgB,MAAN,CAAaD,GAAG,GAAG,CAAnB,CAAsB,EAAvG;AACD;AACF,C,CAAC;;;AAGF,OAAO,SAASvB,aAAT,GAAyB;AAC9B,SAAOQ,KAAK,IAAIf,OAAO,CAACoC,MAAR,CAAe,CAACrB,KAAD,EAAQsB,GAAR,KAAgBL,cAAc,CAACjB,KAAD,EAAS,UAASsB,GAAI,GAAtB,EAA0BC,KAAK,IAAI;AAC9F,UAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAd;AACA,WAAQ,GAAEH,GAAI,IAAGE,KAAK,CAACE,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKJ,KAAK,CAACpB,MAAN,GAAe,CAA5C,EAA+CS,IAA/C,CAAoD,GAApD,CAAyD,GAA1E;AACD,GAH4D,CAA7C,EAGZb,KAHY,CAAhB;AAID;AACD,OAAO,SAASF,YAAT,GAAwB;AAC7B,SAAO,CAACE,KAAD,EAAQ;AACb6B,IAAAA;AADa,MAEX,EAFG,KAEI;AACT,QAAI1B,KAAK,GAAG,CAAZ;;AAEA,WAAOA,KAAK,KAAK,CAAC,CAAlB,EAAqB;AACnBA,MAAAA,KAAK,GAAGH,KAAK,CAACoB,OAAN,CAAc,IAAd,CAAR;;AAEA,UAAIjB,KAAK,KAAK,CAAd,EAAiB;AACfH,QAAAA,KAAK,GAAGA,KAAK,CAACgB,MAAN,CAAa,CAAb,CAAR;AACD,OAFD,MAEO,IAAIb,KAAK,KAAK,CAAC,CAAf,EAAkB;AACvB,YAAI0B,eAAJ,EAAqB;AACnB,iBAAO7B,KAAP;AACD;;AAED,YAAIC,KAAK,GAAGE,KAAZ;;AAEA,eAAOF,KAAK,KAAK,CAAC,CAAX,IAAgB,CAACb,aAAa,CAAC0B,QAAd,CAAuBd,KAAK,CAACC,KAAD,CAA5B,CAAxB,EAA8D;AAC5DA,UAAAA,KAAK;AACN;;AAEDD,QAAAA,KAAK,GAAI,GAAEA,KAAK,CAACgB,MAAN,CAAa,CAAb,EAAgBf,KAAK,GAAG,CAAxB,CAA2B,GAAED,KAAK,CAACgB,MAAN,CAAab,KAAK,GAAG,CAArB,CAAwB,EAAhE;AACD;AACF;;AAED,WAAOH,KAAP;AACD,GA1BD;AA2BD;AACD,OAAO,SAASJ,cAAT,GAA0B;AAC/B,SAAOI,KAAK,IAAI;AACd,SAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,KAAK,CAACI,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjD,UAAIH,KAAK,CAACG,KAAD,CAAL,KAAiB,GAArB,EAA0B;AACxB;AACA,cAAMS,GAAG,GAAG1B,aAAa,CAAC4C,IAAd,CAAmBlB,GAAG,IAAI;AACpC,gBAAMX,KAAK,GAAGE,KAAK,GAAGS,GAAG,CAACR,MAA1B;AACA,iBAAOH,KAAK,IAAI,CAAT,IAAcD,KAAK,CAACgB,MAAN,CAAaf,KAAb,EAAoBW,GAAG,CAACR,MAAxB,MAAoCQ,GAAlD,MAA2D;AAClEX,UAAAA,KAAK,KAAK,CAAV,IAAeb,aAAa,CAAC0B,QAAd,CAAuBd,KAAK,CAACC,KAAK,GAAG,CAAT,CAA5B,CADR,CAAP;AAED,SAJW,CAAZ,CAFwB,CAMpB;;AAEJ,YAAI,CAACW,GAAL,EAAU;AACR,gBAAMG,GAAG,GAAGhB,WAAW,CAACC,KAAD,EAAQG,KAAK,GAAG,CAAhB,CAAvB;AACAH,UAAAA,KAAK,GAAI,GAAEA,KAAK,CAACgB,MAAN,CAAa,CAAb,EAAgBb,KAAhB,CAAuB,GAAEH,KAAK,CAACgB,MAAN,CAAaD,GAAG,GAAG,CAAnB,CAAsB,EAA1D;AACD;AACF;AACF;;AAED,WAAOf,KAAP;AACD,GAlBD;AAmBD,C,CAAC;;AAEF,OAAO,SAASN,YAAT,GAAwB;AAC7B,QAAMyB,QAAQ,GAAGI,KAAK,IAAK,IAAGA,KAAM,IAAGA,KAAM,GAA7C;;AAEA,SAAOvB,KAAK,IAAIiB,cAAc,CAACjB,KAAD,EAAQ,SAAR,EAAmBmB,QAAnB,CAA9B;AACD,C,CAAC;;AAEF,OAAO,SAAS1B,YAAT,GAAwB;AAC7B,SAAOO,KAAK,IAAIA,KAAK,CAAC;AAAD,GACpBS,OADe,CACP,KADO,EACA,EADA,EACI;AADJ,GAEfA,OAFe,CAEP,aAFO,EAEQ,EAFR,EAEY;AAFZ,GAGfA,OAHe,CAGP,sBAHO,EAGiB,EAHjB,EAGqB;AAHrB,GAIfA,OAJe,CAIP,uBAJO,EAIkB,EAJlB,EAIsB;AAJtB,GAKfA,OALe,CAKP,yBALO,EAKoB,QALpB,EAK8B;AAL9B,GAMfA,OANe,CAMP,SANO,EAMI,EANJ,CAAhB;AAOD,C,CAAC;;AAEF,OAAO,SAASd,UAAT,CAAoBoC,KAApB,EAA2B;AAChC,QAAMZ,QAAQ,GAAGI,KAAK,IAAIA,KAA1B;;AAEA,SAAOvB,KAAK,IAAIiB,cAAc,CAACjB,KAAD,EAAQ+B,KAAR,EAAeZ,QAAf,CAA9B;AACD,C,CAAC;;AAEF,OAAO,SAASa,QAAT,CAAkBhC,KAAlB,EAAyBiC,OAAzB,EAAkC;AACvC,SAAO5C,QAAQ,CAACgC,MAAT,CAAgB,CAACa,MAAD,EAASC,EAAT,KAAgBA,EAAE,CAACD,MAAD,EAASD,OAAT,CAAlC,EAAqDjC,KAAK,CAACoC,QAAN,EAArD,EAAuEC,IAAvE,EAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];\nconst ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Result', 'Option', 'UInt']);\nconst BOX_PRECEDING = ['<', '(', '[', '\"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple\n\nconst mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport\nalias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>\ncleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>\nremoveBounded(), // Remove all the trait prefixes\nremoveTraits(), // remove PairOf<T> -> (T, T)\nremovePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`\nremoveWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`\nremoveGenerics(), // alias String -> Text (compat with jsonrpc methods)\nalias('String', 'Text'), // alias Vec<u8> -> Bytes\nalias('Vec<u8>', 'Bytes'), alias('&\\\\[u8\\\\]', 'Bytes'), alias(\"&'static\\\\[u8\\\\]\", 'Bytes'), // alias RawAddress -> Address\nalias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime\nalias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec\nalias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`\nflattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal\nremoveColons()]; // given a starting index, find the closing >\n\nexport function findClosing(value, start) {\n  let depth = 0;\n\n  for (let index = start; index < value.length; index++) {\n    if (value[index] === '>') {\n      if (!depth) {\n        return index;\n      }\n\n      depth--;\n    } else if (value[index] === '<') {\n      depth++;\n    }\n  }\n\n  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);\n}\nexport function alias(src, dest, withChecks = true) {\n  return value => value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);\n}\nexport function cleanupCompact() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        const end = findClosing(value, index + 1) - 14;\n\n        if (value.substr(end, 14) === ' as HasCompact') {\n          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;\n        }\n      }\n    }\n\n    return value;\n  };\n}\nexport function flattenSingleTuple() {\n  return value => value.replace(/\\(([^,]+)\\)/, '$1');\n}\n\nfunction replaceTagWith(value, matcher, replacer) {\n  let index = -1;\n\n  while (true) {\n    index = value.indexOf(matcher, index + 1);\n\n    if (index === -1) {\n      return value;\n    }\n\n    const start = index + matcher.length;\n    const end = findClosing(value, start);\n    value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;\n  }\n} // remove the Bounded* wrappers\n\n\nexport function removeBounded() {\n  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `Bounded${tag}<`, inner => {\n    const parts = inner.split(',');\n    return `${tag}<${parts.filter((_, i) => i !== parts.length - 1).join(',')}>`;\n  }), value);\n}\nexport function removeColons() {\n  return (value, {\n    allowNamespaces\n  } = {}) => {\n    let index = 0;\n\n    while (index !== -1) {\n      index = value.indexOf('::');\n\n      if (index === 0) {\n        value = value.substr(2);\n      } else if (index !== -1) {\n        if (allowNamespaces) {\n          return value;\n        }\n\n        let start = index;\n\n        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {\n          start--;\n        }\n\n        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;\n      }\n    }\n\n    return value;\n  };\n}\nexport function removeGenerics() {\n  return value => {\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '<') {\n        // check against the allowed wrappers, be it Vec<..>, Option<...> ...\n        const box = ALLOWED_BOXES.find(box => {\n          const start = index - box.length;\n          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>\n          start === 0 || BOX_PRECEDING.includes(value[start - 1]));\n        }); // we have not found anything, unwrap generic innards\n\n        if (!box) {\n          const end = findClosing(value, index + 1);\n          value = `${value.substr(0, index)}${value.substr(end + 1)}`;\n        }\n      }\n    }\n\n    return value;\n  };\n} // remove the PairOf wrappers\n\nexport function removePairOf() {\n  const replacer = inner => `(${inner},${inner})`;\n\n  return value => replaceTagWith(value, 'PairOf<', replacer);\n} // remove the type traits\n\nexport function removeTraits() {\n  return value => value // remove all whitespaces\n  .replace(/\\s/g, '') // anything `T::<type>` to end up as `<type>`\n  .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)\n  .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)\n  .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>\n  .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`\n  .replace(/::Type/g, '');\n} // remove wrapping values, i.e. Box<Proposal> -> Proposal\n\nexport function removeWrap(check) {\n  const replacer = inner => inner;\n\n  return value => replaceTagWith(value, check, replacer);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function sanitize(value, options) {\n  return mappings.reduce((result, fn) => fn(result, options), value.toString()).trim();\n}"]},"metadata":{},"sourceType":"module"}