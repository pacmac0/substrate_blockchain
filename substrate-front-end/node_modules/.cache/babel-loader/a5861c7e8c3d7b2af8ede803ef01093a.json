{"ast":null,"code":"'use strict';\n\nvar elliptic = require('elliptic');\n\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n/**\n * @param {EDDSA} eddsa - instance\n * @param {Object} params - public/private key parameters\n *\n * @param {Array<Byte>} [params.secret] - secret seed bytes\n * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n * @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n *\n */\n\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair) return pub;\n  return new KeyPair(eddsa, {\n    pub: pub\n  });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair) return secret;\n  return new KeyPair(eddsa, {\n    secret: secret\n  });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  return this.secret();\n});\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;","map":{"version":3,"sources":["/Users/pacmac/Documents/GitHub/Blockchain/substarte_blockchain/substrate-front-end-template/node_modules/bip32-ed25519/elliptic_eddsa_variant/key.js"],"names":["elliptic","require","utils","assert","parseBytes","cachedProperty","KeyPair","eddsa","params","_secret","secret","isPoint","pub","_pub","_pubBytes","fromPublic","fromSecret","prototype","pubBytes","encodePoint","decodePoint","g","mul","priv","privBytes","decodeInt","hash","update","digest","messagePrefix","slice","encodingLength","sign","message","verify","sig","getSecret","enc","encode","getPublic","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar elliptic = require('elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n * @param {EDDSA} eddsa - instance\n * @param {Object} params - public/private key parameters\n *\n * @param {Array<Byte>} [params.secret] - secret seed bytes\n * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n * @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n *\n */\nfunction KeyPair(eddsa, params) {\n    this.eddsa = eddsa;\n    this._secret = parseBytes(params.secret);\n    if (eddsa.isPoint(params.pub))\n        this._pub = params.pub;\n    else\n        this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n    if (pub instanceof KeyPair)\n        return pub;\n    return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n    if (secret instanceof KeyPair)\n        return secret;\n    return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n    return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n    return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n    if (this._pubBytes)\n        return this.eddsa.decodePoint(this._pubBytes);\n    return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n    return this.secret();\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n    return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n    return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n    return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n    assert(this._secret, 'KeyPair can only verify');\n    return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n    return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n    assert(this._secret, 'KeyPair is public only');\n    return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n    return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;"]},"metadata":{},"sourceType":"script"}