{"ast":null,"code":"var BN = require('bn.js');\n\nvar hash = require('hash.js');\n\nvar elliptic = require('elliptic');\n\nvar utils = elliptic.utils;\n\nvar EDDSA = require('./elliptic_eddsa_variant');\n\nvar eddsa = new EDDSA('ed25519');\n\nfunction sha512(data) {\n  var digest = hash.sha512().update(data).digest();\n  return Buffer.from(digest);\n}\n\nfunction hmac512(key, data) {\n  var digest = hash.hmac(hash.sha512, key).update(data).digest();\n  return Buffer.from(digest);\n}\n\nfunction makeEd25519Extended(secret) {\n  var extended = sha512(secret);\n  extended[0] &= 248;\n  extended[31] &= 63;\n  extended[31] |= 64;\n  return extended;\n}\n\nfunction generateFromSeed(seed) {\n  var iter = 1;\n\n  while (true) {\n    var s = 'Root Seed Chain ' + iter;\n    var block = hmac512(seed, s);\n    var extended = makeEd25519Extended(block.slice(0, 32));\n\n    if ((extended[31] & 0x20) === 0) {\n      return Buffer.concat([extended, block.slice(32, 64)]);\n    }\n\n    iter++;\n  }\n}\n\nfunction fromSeed2(seed) {\n  var s = 'ed25519 cardano seed';\n  var block = hmac512(s, seed);\n  var extended = sha512(block.slice(0, 32));\n  extended[0] &= 248;\n  extended[31] &= 0x1f;\n  extended[31] |= 64;\n  return Buffer.concat([extended, block.slice(32, 64)]);\n}\n\nfunction derivePrivate(xprv, index) {\n  var kl = xprv.slice(0, 32);\n  var kr = xprv.slice(32, 64);\n  var cc = xprv.slice(64, 96);\n  var data;\n  var z, i;\n\n  if (index < 0x80000000) {\n    data = Buffer.allocUnsafe(1 + 32 + 4);\n    data.writeUInt32LE(index, 1 + 32);\n    var pk = toPublic(kl);\n    pk.copy(data, 1);\n    data[0] = 0x02;\n    z = hmac512(cc, data);\n    data[0] = 0x03;\n    i = hmac512(cc, data);\n  } else {\n    data = Buffer.allocUnsafe(1 + 64 + 4);\n    data.writeUInt32LE(index, 1 + 64);\n    kl.copy(data, 1);\n    kr.copy(data, 1 + 32);\n    data[0] = 0x00;\n    z = hmac512(cc, data);\n    data[0] = 0x01;\n    i = hmac512(cc, data);\n  }\n\n  var chainCode = i.slice(32, 64);\n  var zl = z.slice(0, 32);\n  var zr = z.slice(32, 64); // left = kl + 8 * trunc28(zl)\n  // right = zr + kr\n\n  var left = new BN(kl, 16, 'le').add(new BN(zl.slice(0, 28), 16, 'le').mul(new BN(8))).toArrayLike(Buffer, 'le', 32);\n  var right = new BN(kr, 16, 'le').add(new BN(zr, 16, 'le')).toArrayLike(Buffer, 'le').slice(0, 32); // just padding\n\n  if (right.length !== 32) {\n    right = Buffer.from(right.toString('hex') + '00', 'hex');\n  }\n\n  return Buffer.concat([left, right, chainCode]);\n}\n\nfunction derivePublic(xpub, index) {\n  var pk = xpub.slice(0, 32);\n  var cc = xpub.slice(32, 64);\n  var data = Buffer.allocUnsafe(1 + 32 + 4);\n  data.writeUInt32LE(index, 1 + 32);\n  var z, i;\n\n  if (index < 0x80000000) {\n    pk.copy(data, 1);\n    data[0] = 0x02;\n    z = hmac512(cc, data);\n    data[0] = 0x03;\n    i = hmac512(cc, data);\n  } else {\n    throw new Error('can not derive public key with harden');\n  }\n\n  var chainCode = i.slice(32, 64);\n  var zl = z.slice(0, 32); // left = 8 * trunc28(zl)\n\n  var left = new BN(zl.slice(0, 28), 16, 'le').mul(new BN(8));\n  var p = eddsa.g.mul(left);\n  var pp = eddsa.decodePoint(pk.toString('hex'));\n  var point = pp.add(p);\n  return Buffer.concat([Buffer.from(eddsa.encodePoint(point)), chainCode]);\n}\n\nfunction toPublic(xprv) {\n  if (xprv.length !== 32 && xprv.length !== 96) {\n    throw new Error('invalid xprv');\n  }\n\n  var key = eddsa.keyFromSecret(xprv.slice(0, 32).toString('hex'));\n  var pk = Buffer.from(key.pubBytes());\n\n  if (xprv.length > 64) {\n    return Buffer.concat([pk, xprv.slice(64, 96)]);\n  }\n\n  return pk;\n}\n\nfunction sign(message, xprv) {\n  if (typeof xprv !== 'string') {\n    xprv = xprv.toString('hex');\n  }\n\n  var keyPair = eddsa.keyFromSecret(utils.parseBytes(xprv).slice(0, 32));\n  var sig = keyPair.sign(message);\n  return Buffer.from(sig.toBytes());\n}\n\nfunction verify(message, sig, xpub) {\n  if (typeof xpub !== 'string') {\n    xpub = xpub.toString('hex');\n  }\n\n  return eddsa.verify(message, sig.toString('hex'), utils.parseBytes(xpub).slice(0, 32));\n}\n\nmodule.exports = {\n  fromSeed2: fromSeed2,\n  fromSeed: generateFromSeed,\n  generateFromSeed: generateFromSeed,\n  derivePrivate: derivePrivate,\n  derivePublic: derivePublic,\n  toPublic: toPublic,\n  eddsa: eddsa,\n  sign: sign,\n  verify: verify\n};","map":{"version":3,"sources":["/Users/pacmac/Documents/GitHub/Blockchain/substarte_blockchain/substrate-front-end-template/node_modules/bip32-ed25519/index.js"],"names":["BN","require","hash","elliptic","utils","EDDSA","eddsa","sha512","data","digest","update","Buffer","from","hmac512","key","hmac","makeEd25519Extended","secret","extended","generateFromSeed","seed","iter","s","block","slice","concat","fromSeed2","derivePrivate","xprv","index","kl","kr","cc","z","i","allocUnsafe","writeUInt32LE","pk","toPublic","copy","chainCode","zl","zr","left","add","mul","toArrayLike","right","length","toString","derivePublic","xpub","Error","p","g","pp","decodePoint","point","encodePoint","keyFromSecret","pubBytes","sign","message","keyPair","parseBytes","sig","toBytes","verify","module","exports","fromSeed"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIG,KAAK,GAAGD,QAAQ,CAACC,KAArB;;AACA,IAAIC,KAAK,GAAGJ,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAIK,KAAK,GAAG,IAAID,KAAJ,CAAU,SAAV,CAAZ;;AAEA,SAASE,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,MAAIC,MAAM,GAAGP,IAAI,CAACK,MAAL,GAAcG,MAAd,CAAqBF,IAArB,EAA2BC,MAA3B,EAAb;AACA,SAAOE,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAP;AACH;;AAED,SAASI,OAAT,CAAiBC,GAAjB,EAAsBN,IAAtB,EAA4B;AACxB,MAAIC,MAAM,GAAGP,IAAI,CAACa,IAAL,CAAUb,IAAI,CAACK,MAAf,EAAuBO,GAAvB,EAA4BJ,MAA5B,CAAmCF,IAAnC,EAAyCC,MAAzC,EAAb;AACA,SAAOE,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAP;AACH;;AAED,SAASO,mBAAT,CAA6BC,MAA7B,EAAqC;AACjC,MAAIC,QAAQ,GAAGX,MAAM,CAACU,MAAD,CAArB;AACAC,EAAAA,QAAQ,CAAC,CAAD,CAAR,IAAe,GAAf;AACAA,EAAAA,QAAQ,CAAC,EAAD,CAAR,IAAgB,EAAhB;AACAA,EAAAA,QAAQ,CAAC,EAAD,CAAR,IAAgB,EAAhB;AACA,SAAOA,QAAP;AACH;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,MAAIC,IAAI,GAAG,CAAX;;AACA,SAAO,IAAP,EAAa;AACT,QAAIC,CAAC,GAAG,qBAAqBD,IAA7B;AACA,QAAIE,KAAK,GAAGV,OAAO,CAACO,IAAD,EAAOE,CAAP,CAAnB;AACA,QAAIJ,QAAQ,GAAGF,mBAAmB,CAACO,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAD,CAAlC;;AACA,QAAI,CAACN,QAAQ,CAAC,EAAD,CAAR,GAAe,IAAhB,MAA0B,CAA9B,EAAiC;AAC7B,aAAOP,MAAM,CAACc,MAAP,CAAc,CAACP,QAAD,EAAWK,KAAK,CAACC,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAX,CAAd,CAAP;AACH;;AACDH,IAAAA,IAAI;AACP;AACJ;;AAED,SAASK,SAAT,CAAmBN,IAAnB,EAAyB;AACrB,MAAIE,CAAC,GAAG,sBAAR;AACA,MAAIC,KAAK,GAAGV,OAAO,CAACS,CAAD,EAAIF,IAAJ,CAAnB;AAEA,MAAIF,QAAQ,GAAGX,MAAM,CAACgB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAD,CAArB;AACAN,EAAAA,QAAQ,CAAC,CAAD,CAAR,IAAe,GAAf;AACAA,EAAAA,QAAQ,CAAC,EAAD,CAAR,IAAgB,IAAhB;AACAA,EAAAA,QAAQ,CAAC,EAAD,CAAR,IAAgB,EAAhB;AAEA,SAAOP,MAAM,CAACc,MAAP,CAAc,CAACP,QAAD,EAAWK,KAAK,CAACC,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAX,CAAd,CAAP;AACH;;AAED,SAASG,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoC;AAChC,MAAIC,EAAE,GAAGF,IAAI,CAACJ,KAAL,CAAW,CAAX,EAAc,EAAd,CAAT;AACA,MAAIO,EAAE,GAAGH,IAAI,CAACJ,KAAL,CAAW,EAAX,EAAe,EAAf,CAAT;AACA,MAAIQ,EAAE,GAAGJ,IAAI,CAACJ,KAAL,CAAW,EAAX,EAAe,EAAf,CAAT;AAEA,MAAIhB,IAAJ;AACA,MAAIyB,CAAJ,EAAOC,CAAP;;AACA,MAAIL,KAAK,GAAG,UAAZ,EAAwB;AACpBrB,IAAAA,IAAI,GAAGG,MAAM,CAACwB,WAAP,CAAmB,IAAI,EAAJ,GAAS,CAA5B,CAAP;AACA3B,IAAAA,IAAI,CAAC4B,aAAL,CAAmBP,KAAnB,EAA0B,IAAI,EAA9B;AAEA,QAAIQ,EAAE,GAAGC,QAAQ,CAACR,EAAD,CAAjB;AACAO,IAAAA,EAAE,CAACE,IAAH,CAAQ/B,IAAR,EAAc,CAAd;AAEAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACAyB,IAAAA,CAAC,GAAGpB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACA0B,IAAAA,CAAC,GAAGrB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACH,GAXD,MAYK;AACDA,IAAAA,IAAI,GAAGG,MAAM,CAACwB,WAAP,CAAmB,IAAI,EAAJ,GAAS,CAA5B,CAAP;AACA3B,IAAAA,IAAI,CAAC4B,aAAL,CAAmBP,KAAnB,EAA0B,IAAI,EAA9B;AACAC,IAAAA,EAAE,CAACS,IAAH,CAAQ/B,IAAR,EAAc,CAAd;AACAuB,IAAAA,EAAE,CAACQ,IAAH,CAAQ/B,IAAR,EAAc,IAAI,EAAlB;AAEAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACAyB,IAAAA,CAAC,GAAGpB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACA0B,IAAAA,CAAC,GAAGrB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACH;;AAED,MAAIgC,SAAS,GAAGN,CAAC,CAACV,KAAF,CAAQ,EAAR,EAAY,EAAZ,CAAhB;AACA,MAAIiB,EAAE,GAAGR,CAAC,CAACT,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAT;AACA,MAAIkB,EAAE,GAAGT,CAAC,CAACT,KAAF,CAAQ,EAAR,EAAY,EAAZ,CAAT,CAjCgC,CAmChC;AACA;;AACA,MAAImB,IAAI,GAAG,IAAI3C,EAAJ,CAAO8B,EAAP,EAAW,EAAX,EAAe,IAAf,EAAqBc,GAArB,CAAyB,IAAI5C,EAAJ,CAAOyC,EAAE,CAACjB,KAAH,CAAS,CAAT,EAAY,EAAZ,CAAP,EAAwB,EAAxB,EAA4B,IAA5B,EAAkCqB,GAAlC,CAAsC,IAAI7C,EAAJ,CAAO,CAAP,CAAtC,CAAzB,EAA2E8C,WAA3E,CAAuFnC,MAAvF,EAA+F,IAA/F,EAAqG,EAArG,CAAX;AACA,MAAIoC,KAAK,GAAG,IAAI/C,EAAJ,CAAO+B,EAAP,EAAW,EAAX,EAAe,IAAf,EAAqBa,GAArB,CAAyB,IAAI5C,EAAJ,CAAO0C,EAAP,EAAW,EAAX,EAAe,IAAf,CAAzB,EAA+CI,WAA/C,CAA2DnC,MAA3D,EAAmE,IAAnE,EAAyEa,KAAzE,CAA+E,CAA/E,EAAkF,EAAlF,CAAZ,CAtCgC,CAwChC;;AACA,MAAIuB,KAAK,CAACC,MAAN,KAAiB,EAArB,EAAyB;AACrBD,IAAAA,KAAK,GAAGpC,MAAM,CAACC,IAAP,CAAYmC,KAAK,CAACE,QAAN,CAAe,KAAf,IAAwB,IAApC,EAA0C,KAA1C,CAAR;AACH;;AAED,SAAOtC,MAAM,CAACc,MAAP,CAAc,CAACkB,IAAD,EAAOI,KAAP,EAAcP,SAAd,CAAd,CAAP;AACH;;AAED,SAASU,YAAT,CAAsBC,IAAtB,EAA4BtB,KAA5B,EAAmC;AAC/B,MAAIQ,EAAE,GAAGc,IAAI,CAAC3B,KAAL,CAAW,CAAX,EAAc,EAAd,CAAT;AACA,MAAIQ,EAAE,GAAGmB,IAAI,CAAC3B,KAAL,CAAW,EAAX,EAAe,EAAf,CAAT;AAEA,MAAIhB,IAAI,GAAGG,MAAM,CAACwB,WAAP,CAAmB,IAAI,EAAJ,GAAS,CAA5B,CAAX;AACA3B,EAAAA,IAAI,CAAC4B,aAAL,CAAmBP,KAAnB,EAA0B,IAAI,EAA9B;AAEA,MAAII,CAAJ,EAAOC,CAAP;;AACA,MAAIL,KAAK,GAAG,UAAZ,EAAwB;AACpBQ,IAAAA,EAAE,CAACE,IAAH,CAAQ/B,IAAR,EAAc,CAAd;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACAyB,IAAAA,CAAC,GAAGpB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV;AACA0B,IAAAA,CAAC,GAAGrB,OAAO,CAACmB,EAAD,EAAKxB,IAAL,CAAX;AACH,GAND,MAOK;AACD,UAAM,IAAI4C,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,MAAIZ,SAAS,GAAGN,CAAC,CAACV,KAAF,CAAQ,EAAR,EAAY,EAAZ,CAAhB;AACA,MAAIiB,EAAE,GAAGR,CAAC,CAACT,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAT,CApB+B,CAsB/B;;AACA,MAAImB,IAAI,GAAG,IAAI3C,EAAJ,CAAOyC,EAAE,CAACjB,KAAH,CAAS,CAAT,EAAY,EAAZ,CAAP,EAAwB,EAAxB,EAA4B,IAA5B,EAAkCqB,GAAlC,CAAsC,IAAI7C,EAAJ,CAAO,CAAP,CAAtC,CAAX;AAEA,MAAIqD,CAAC,GAAG/C,KAAK,CAACgD,CAAN,CAAQT,GAAR,CAAYF,IAAZ,CAAR;AACA,MAAIY,EAAE,GAAGjD,KAAK,CAACkD,WAAN,CAAkBnB,EAAE,CAACY,QAAH,CAAY,KAAZ,CAAlB,CAAT;AACA,MAAIQ,KAAK,GAAGF,EAAE,CAACX,GAAH,CAAOS,CAAP,CAAZ;AAEA,SAAO1C,MAAM,CAACc,MAAP,CAAc,CAACd,MAAM,CAACC,IAAP,CAAYN,KAAK,CAACoD,WAAN,CAAkBD,KAAlB,CAAZ,CAAD,EAAwCjB,SAAxC,CAAd,CAAP;AACH;;AAED,SAASF,QAAT,CAAkBV,IAAlB,EAAwB;AACpB,MAAIA,IAAI,CAACoB,MAAL,KAAgB,EAAhB,IAAsBpB,IAAI,CAACoB,MAAL,KAAgB,EAA1C,EAA8C;AAC1C,UAAM,IAAII,KAAJ,CAAU,cAAV,CAAN;AACH;;AAED,MAAItC,GAAG,GAAGR,KAAK,CAACqD,aAAN,CAAoB/B,IAAI,CAACJ,KAAL,CAAW,CAAX,EAAc,EAAd,EAAkByB,QAAlB,CAA2B,KAA3B,CAApB,CAAV;AACA,MAAIZ,EAAE,GAAG1B,MAAM,CAACC,IAAP,CAAYE,GAAG,CAAC8C,QAAJ,EAAZ,CAAT;;AACA,MAAIhC,IAAI,CAACoB,MAAL,GAAc,EAAlB,EAAsB;AAClB,WAAOrC,MAAM,CAACc,MAAP,CAAc,CAACY,EAAD,EAAKT,IAAI,CAACJ,KAAL,CAAW,EAAX,EAAe,EAAf,CAAL,CAAd,CAAP;AACH;;AACD,SAAOa,EAAP;AACH;;AAED,SAASwB,IAAT,CAAcC,OAAd,EAAuBlC,IAAvB,EAA6B;AACzB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1BA,IAAAA,IAAI,GAAGA,IAAI,CAACqB,QAAL,CAAc,KAAd,CAAP;AACH;;AACD,MAAIc,OAAO,GAAGzD,KAAK,CAACqD,aAAN,CAAoBvD,KAAK,CAAC4D,UAAN,CAAiBpC,IAAjB,EAAuBJ,KAAvB,CAA6B,CAA7B,EAAgC,EAAhC,CAApB,CAAd;AACA,MAAIyC,GAAG,GAAGF,OAAO,CAACF,IAAR,CAAaC,OAAb,CAAV;AACA,SAAOnD,MAAM,CAACC,IAAP,CAAYqD,GAAG,CAACC,OAAJ,EAAZ,CAAP;AACH;;AAED,SAASC,MAAT,CAAgBL,OAAhB,EAAyBG,GAAzB,EAA8Bd,IAA9B,EAAoC;AAChC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1BA,IAAAA,IAAI,GAAGA,IAAI,CAACF,QAAL,CAAc,KAAd,CAAP;AACH;;AACD,SAAO3C,KAAK,CAAC6D,MAAN,CAAaL,OAAb,EAAsBG,GAAG,CAAChB,QAAJ,CAAa,KAAb,CAAtB,EAA2C7C,KAAK,CAAC4D,UAAN,CAAiBb,IAAjB,EAAuB3B,KAAvB,CAA6B,CAA7B,EAAgC,EAAhC,CAA3C,CAAP;AACH;;AAED4C,MAAM,CAACC,OAAP,GAAiB;AACb3C,EAAAA,SAAS,EAAEA,SADE;AAEb4C,EAAAA,QAAQ,EAAEnD,gBAFG;AAGbA,EAAAA,gBAAgB,EAAEA,gBAHL;AAIbQ,EAAAA,aAAa,EAAEA,aAJF;AAKbuB,EAAAA,YAAY,EAAEA,YALD;AAMbZ,EAAAA,QAAQ,EAAEA,QANG;AAObhC,EAAAA,KAAK,EAAEA,KAPM;AAQbuD,EAAAA,IAAI,EAAEA,IARO;AASbM,EAAAA,MAAM,EAAEA;AATK,CAAjB","sourcesContent":["var BN = require('bn.js');\nvar hash = require('hash.js');\nvar elliptic = require('elliptic');\nvar utils = elliptic.utils;\nvar EDDSA = require('./elliptic_eddsa_variant');\nvar eddsa = new EDDSA('ed25519');\n\nfunction sha512(data) {\n    var digest = hash.sha512().update(data).digest();\n    return Buffer.from(digest);\n}\n\nfunction hmac512(key, data) {\n    var digest = hash.hmac(hash.sha512, key).update(data).digest();\n    return Buffer.from(digest);\n}\n\nfunction makeEd25519Extended(secret) {\n    var extended = sha512(secret);\n    extended[0] &= 248;\n    extended[31] &= 63;\n    extended[31] |= 64;\n    return extended;\n}\n\nfunction generateFromSeed(seed) {\n    var iter = 1;\n    while (true) {\n        var s = 'Root Seed Chain ' + iter;\n        var block = hmac512(seed, s);\n        var extended = makeEd25519Extended(block.slice(0, 32));\n        if ((extended[31] & 0x20) === 0) {\n            return Buffer.concat([extended, block.slice(32, 64)])\n        }\n        iter++;\n    }\n}\n\nfunction fromSeed2(seed) {\n    var s = 'ed25519 cardano seed';\n    var block = hmac512(s, seed);\n\n    var extended = sha512(block.slice(0, 32));\n    extended[0] &= 248;\n    extended[31] &= 0x1f;\n    extended[31] |= 64;\n\n    return Buffer.concat([extended, block.slice(32, 64)])\n}\n\nfunction derivePrivate(xprv, index) {\n    var kl = xprv.slice(0, 32);\n    var kr = xprv.slice(32, 64);\n    var cc = xprv.slice(64, 96);\n\n    var data;\n    var z, i;\n    if (index < 0x80000000) {\n        data = Buffer.allocUnsafe(1 + 32 + 4);\n        data.writeUInt32LE(index, 1 + 32);\n\n        var pk = toPublic(kl);\n        pk.copy(data, 1);\n\n        data[0] = 0x02;\n        z = hmac512(cc, data);\n        data[0] = 0x03;\n        i = hmac512(cc, data);\n    }\n    else {\n        data = Buffer.allocUnsafe(1 + 64 + 4);\n        data.writeUInt32LE(index, 1 + 64);\n        kl.copy(data, 1);\n        kr.copy(data, 1 + 32);\n\n        data[0] = 0x00;\n        z = hmac512(cc, data);\n        data[0] = 0x01;\n        i = hmac512(cc, data);\n    }\n\n    var chainCode = i.slice(32, 64);\n    var zl = z.slice(0, 32);\n    var zr = z.slice(32, 64);\n\n    // left = kl + 8 * trunc28(zl)\n    // right = zr + kr\n    var left = new BN(kl, 16, 'le').add(new BN(zl.slice(0, 28), 16, 'le').mul(new BN(8))).toArrayLike(Buffer, 'le', 32);\n    var right = new BN(kr, 16, 'le').add(new BN(zr, 16, 'le')).toArrayLike(Buffer, 'le').slice(0, 32);\n\n    // just padding\n    if (right.length !== 32) {\n        right = Buffer.from(right.toString('hex') + '00', 'hex')\n    }\n\n    return Buffer.concat([left, right, chainCode]);\n}\n\nfunction derivePublic(xpub, index) {\n    var pk = xpub.slice(0, 32);\n    var cc = xpub.slice(32, 64);\n\n    var data = Buffer.allocUnsafe(1 + 32 + 4);\n    data.writeUInt32LE(index, 1 + 32);\n\n    var z, i;\n    if (index < 0x80000000) {\n        pk.copy(data, 1);\n        data[0] = 0x02;\n        z = hmac512(cc, data);\n        data[0] = 0x03;\n        i = hmac512(cc, data);\n    }\n    else {\n        throw new Error('can not derive public key with harden')\n    }\n\n    var chainCode = i.slice(32, 64);\n    var zl = z.slice(0, 32);\n\n    // left = 8 * trunc28(zl)\n    var left = new BN(zl.slice(0, 28), 16, 'le').mul(new BN(8));\n\n    var p = eddsa.g.mul(left);\n    var pp = eddsa.decodePoint(pk.toString('hex'));\n    var point = pp.add(p);\n\n    return Buffer.concat([Buffer.from(eddsa.encodePoint(point)), chainCode]);\n}\n\nfunction toPublic(xprv) {\n    if (xprv.length !== 32 && xprv.length !== 96) {\n        throw new Error('invalid xprv')\n    }\n\n    var key = eddsa.keyFromSecret(xprv.slice(0, 32).toString('hex'));\n    var pk = Buffer.from(key.pubBytes());\n    if (xprv.length > 64) {\n        return Buffer.concat([pk, xprv.slice(64, 96)])\n    }\n    return pk;\n}\n\nfunction sign(message, xprv) {\n    if (typeof xprv !== 'string') {\n        xprv = xprv.toString('hex')\n    }\n    var keyPair = eddsa.keyFromSecret(utils.parseBytes(xprv).slice(0, 32));\n    var sig = keyPair.sign(message);\n    return Buffer.from(sig.toBytes());\n}\n\nfunction verify(message, sig, xpub) {\n    if (typeof xpub !== 'string') {\n        xpub = xpub.toString('hex')\n    }\n    return eddsa.verify(message, sig.toString('hex'), utils.parseBytes(xpub).slice(0, 32));\n}\n\nmodule.exports = {\n    fromSeed2: fromSeed2,\n    fromSeed: generateFromSeed,\n    generateFromSeed: generateFromSeed,\n    derivePrivate: derivePrivate,\n    derivePublic: derivePublic,\n    toPublic: toPublic,\n    eddsa: eddsa,\n    sign: sign,\n    verify: verify\n};\n"]},"metadata":{},"sourceType":"script"}