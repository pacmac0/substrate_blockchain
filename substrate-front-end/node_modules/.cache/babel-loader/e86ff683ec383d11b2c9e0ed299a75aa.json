{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2019-2021 @polkadot/extension-dapp authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { u8aEq } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { documentReadyPromise } from \"./util.js\"; // just a helper (otherwise we cast all-over, so shorter and more readable)\n\nconst win = window; // don't clobber the existing object, but ensure non-undefined\n\nwin.injectedWeb3 = win.injectedWeb3 || {}; // true when anything has been injected and is available\n\nfunction web3IsInjected() {\n  return Object.keys(win.injectedWeb3).length !== 0;\n} // helper to throw a consistent error when not enabled\n\n\nfunction throwError(method) {\n  throw new Error(`${method}: web3Enable(originName) needs to be called before ${method}`);\n} // internal helper to map from Array<InjectedAccount> -> Array<InjectedAccountWithMeta>\n\n\nfunction mapAccounts(source, list, ss58Format) {\n  return list.map(({\n    address,\n    genesisHash,\n    name\n  }) => {\n    const encodedAddress = encodeAddress(decodeAddress(address), ss58Format);\n    return {\n      address: encodedAddress,\n      meta: {\n        genesisHash,\n        name,\n        source\n      }\n    };\n  });\n} // have we found a properly constructed window.injectedWeb3\n\n\nlet isWeb3Injected = web3IsInjected(); // we keep the last promise created around (for queries)\n\nlet web3EnablePromise = null;\nexport { isWeb3Injected, web3EnablePromise };\n\nfunction getWindowExtensions(originName) {\n  return Promise.all(Object.entries(win.injectedWeb3).map(([name, {\n    enable,\n    version\n  }]) => Promise.all([Promise.resolve({\n    name,\n    version\n  }), enable(originName).catch(error => {\n    console.error(`Error initializing ${name}: ${error.message}`);\n  })])));\n} // enables all the providers found on the injected window interface\n\n\nexport function web3Enable(originName) {\n  if (!originName) {\n    throw new Error('You must pass a name for your app to the web3Enable function');\n  }\n\n  web3EnablePromise = documentReadyPromise(() => getWindowExtensions(originName).then(values => values.filter(value => !!value[1]).map(([info, ext]) => {\n    // if we don't have an accounts subscriber, add a single-shot version\n    if (!ext.accounts.subscribe) {\n      ext.accounts.subscribe = cb => {\n        ext.accounts.get().then(cb).catch(console.error);\n        return () => {// no ubsubscribe needed, this is a single-shot\n        };\n      };\n    }\n\n    return _objectSpread(_objectSpread({}, info), ext);\n  })).catch(() => []).then(values => {\n    const names = values.map(({\n      name,\n      version\n    }) => `${name}/${version}`);\n    isWeb3Injected = web3IsInjected();\n    console.log(`web3Enable: Enabled ${values.length} extension${values.length !== 1 ? 's' : ''}: ${names.join(', ')}`);\n    return values;\n  }));\n  return web3EnablePromise;\n} // retrieve all the accounts accross all providers\n\nexport async function web3Accounts({\n  ss58Format\n} = {}) {\n  if (!web3EnablePromise) {\n    return throwError('web3Accounts');\n  }\n\n  const accounts = [];\n  const injected = await web3EnablePromise;\n  const retrieved = await Promise.all(injected.map(async ({\n    accounts,\n    name: source\n  }) => {\n    try {\n      const list = await accounts.get();\n      return mapAccounts(source, list, ss58Format);\n    } catch (error) {\n      // cannot handle this one\n      return [];\n    }\n  }));\n  retrieved.forEach(result => {\n    accounts.push(...result);\n  });\n  const addresses = accounts.map(({\n    address\n  }) => address);\n  console.log(`web3Accounts: Found ${accounts.length} address${accounts.length !== 1 ? 'es' : ''}: ${addresses.join(', ')}`);\n  return accounts;\n}\nexport async function web3AccountsSubscribe(cb, {\n  ss58Format\n} = {}) {\n  if (!web3EnablePromise) {\n    return throwError('web3AccountsSubscribe');\n  }\n\n  const accounts = {};\n\n  const triggerUpdate = () => cb(Object.entries(accounts).reduce((result, [source, list]) => {\n    result.push(...mapAccounts(source, list, ss58Format));\n    return result;\n  }, []));\n\n  const unsubs = (await web3EnablePromise).map(({\n    accounts: {\n      subscribe\n    },\n    name: source\n  }) => subscribe(result => {\n    accounts[source] = result; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    triggerUpdate();\n  }));\n  return () => {\n    unsubs.forEach(unsub => {\n      unsub();\n    });\n  };\n} // find a specific provider based on the name\n\nexport async function web3FromSource(source) {\n  if (!web3EnablePromise) {\n    return throwError('web3FromSource');\n  }\n\n  const sources = await web3EnablePromise;\n  const found = source && sources.find(({\n    name\n  }) => name === source);\n\n  if (!found) {\n    throw new Error(`web3FromSource: Unable to find an injected ${source}`);\n  }\n\n  return found;\n} // find a specific provider based on an address\n\nexport async function web3FromAddress(address) {\n  if (!web3EnablePromise) {\n    return throwError('web3FromAddress');\n  }\n\n  const accounts = await web3Accounts();\n  let found;\n\n  if (address) {\n    const accountU8a = decodeAddress(address);\n    found = accounts.find(account => u8aEq(decodeAddress(account.address), accountU8a));\n  }\n\n  if (!found) {\n    throw new Error(`web3FromAddress: Unable to find injected ${address}`);\n  }\n\n  return web3FromSource(found.meta.source);\n} // retrieve all providers exposed by one source\n\nexport async function web3ListRpcProviders(source) {\n  const {\n    provider\n  } = await web3FromSource(source);\n\n  if (!provider) {\n    console.warn(`Extension ${source} does not expose any provider`);\n    return null;\n  }\n\n  return provider.listProviders();\n} // retrieve all providers exposed by one source\n\nexport async function web3UseRpcProvider(source, key) {\n  const {\n    provider\n  } = await web3FromSource(source);\n\n  if (!provider) {\n    throw new Error(`Extension ${source} does not expose any provider`);\n  }\n\n  const meta = await provider.startProvider(key);\n  return {\n    meta,\n    provider\n  };\n}","map":{"version":3,"sources":["/Users/pacmac/Documents/GitHub/Blockchain/substarte_blockchain/substrate-front-end-template/node_modules/@polkadot/extension-dapp/index.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","u8aEq","decodeAddress","encodeAddress","documentReadyPromise","win","window","injectedWeb3","web3IsInjected","throwError","method","Error","mapAccounts","list","ss58Format","map","address","genesisHash","name","encodedAddress","meta","isWeb3Injected","web3EnablePromise","getWindowExtensions","originName","Promise","all","entries","enable","version","resolve","catch","error","console","message","web3Enable","then","values","value","info","ext","accounts","subscribe","cb","get","names","log","join","web3Accounts","injected","retrieved","result","addresses","web3AccountsSubscribe","triggerUpdate","reduce","unsubs","unsub","web3FromSource","sources","found","find","web3FromAddress","accountU8a","account","web3ListRpcProviders","provider","warn","listProviders","web3UseRpcProvider","startProvider"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2019-2021 @polkadot/extension-dapp authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aEq } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { documentReadyPromise } from \"./util.js\"; // just a helper (otherwise we cast all-over, so shorter and more readable)\n\nconst win = window; // don't clobber the existing object, but ensure non-undefined\n\nwin.injectedWeb3 = win.injectedWeb3 || {}; // true when anything has been injected and is available\n\nfunction web3IsInjected() {\n  return Object.keys(win.injectedWeb3).length !== 0;\n} // helper to throw a consistent error when not enabled\n\n\nfunction throwError(method) {\n  throw new Error(`${method}: web3Enable(originName) needs to be called before ${method}`);\n} // internal helper to map from Array<InjectedAccount> -> Array<InjectedAccountWithMeta>\n\n\nfunction mapAccounts(source, list, ss58Format) {\n  return list.map(({\n    address,\n    genesisHash,\n    name\n  }) => {\n    const encodedAddress = encodeAddress(decodeAddress(address), ss58Format);\n    return {\n      address: encodedAddress,\n      meta: {\n        genesisHash,\n        name,\n        source\n      }\n    };\n  });\n} // have we found a properly constructed window.injectedWeb3\n\n\nlet isWeb3Injected = web3IsInjected(); // we keep the last promise created around (for queries)\n\nlet web3EnablePromise = null;\nexport { isWeb3Injected, web3EnablePromise };\n\nfunction getWindowExtensions(originName) {\n  return Promise.all(Object.entries(win.injectedWeb3).map(([name, {\n    enable,\n    version\n  }]) => Promise.all([Promise.resolve({\n    name,\n    version\n  }), enable(originName).catch(error => {\n    console.error(`Error initializing ${name}: ${error.message}`);\n  })])));\n} // enables all the providers found on the injected window interface\n\n\nexport function web3Enable(originName) {\n  if (!originName) {\n    throw new Error('You must pass a name for your app to the web3Enable function');\n  }\n\n  web3EnablePromise = documentReadyPromise(() => getWindowExtensions(originName).then(values => values.filter(value => !!value[1]).map(([info, ext]) => {\n    // if we don't have an accounts subscriber, add a single-shot version\n    if (!ext.accounts.subscribe) {\n      ext.accounts.subscribe = cb => {\n        ext.accounts.get().then(cb).catch(console.error);\n        return () => {// no ubsubscribe needed, this is a single-shot\n        };\n      };\n    }\n\n    return _objectSpread(_objectSpread({}, info), ext);\n  })).catch(() => []).then(values => {\n    const names = values.map(({\n      name,\n      version\n    }) => `${name}/${version}`);\n    isWeb3Injected = web3IsInjected();\n    console.log(`web3Enable: Enabled ${values.length} extension${values.length !== 1 ? 's' : ''}: ${names.join(', ')}`);\n    return values;\n  }));\n  return web3EnablePromise;\n} // retrieve all the accounts accross all providers\n\nexport async function web3Accounts({\n  ss58Format\n} = {}) {\n  if (!web3EnablePromise) {\n    return throwError('web3Accounts');\n  }\n\n  const accounts = [];\n  const injected = await web3EnablePromise;\n  const retrieved = await Promise.all(injected.map(async ({\n    accounts,\n    name: source\n  }) => {\n    try {\n      const list = await accounts.get();\n      return mapAccounts(source, list, ss58Format);\n    } catch (error) {\n      // cannot handle this one\n      return [];\n    }\n  }));\n  retrieved.forEach(result => {\n    accounts.push(...result);\n  });\n  const addresses = accounts.map(({\n    address\n  }) => address);\n  console.log(`web3Accounts: Found ${accounts.length} address${accounts.length !== 1 ? 'es' : ''}: ${addresses.join(', ')}`);\n  return accounts;\n}\nexport async function web3AccountsSubscribe(cb, {\n  ss58Format\n} = {}) {\n  if (!web3EnablePromise) {\n    return throwError('web3AccountsSubscribe');\n  }\n\n  const accounts = {};\n\n  const triggerUpdate = () => cb(Object.entries(accounts).reduce((result, [source, list]) => {\n    result.push(...mapAccounts(source, list, ss58Format));\n    return result;\n  }, []));\n\n  const unsubs = (await web3EnablePromise).map(({\n    accounts: {\n      subscribe\n    },\n    name: source\n  }) => subscribe(result => {\n    accounts[source] = result; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    triggerUpdate();\n  }));\n  return () => {\n    unsubs.forEach(unsub => {\n      unsub();\n    });\n  };\n} // find a specific provider based on the name\n\nexport async function web3FromSource(source) {\n  if (!web3EnablePromise) {\n    return throwError('web3FromSource');\n  }\n\n  const sources = await web3EnablePromise;\n  const found = source && sources.find(({\n    name\n  }) => name === source);\n\n  if (!found) {\n    throw new Error(`web3FromSource: Unable to find an injected ${source}`);\n  }\n\n  return found;\n} // find a specific provider based on an address\n\nexport async function web3FromAddress(address) {\n  if (!web3EnablePromise) {\n    return throwError('web3FromAddress');\n  }\n\n  const accounts = await web3Accounts();\n  let found;\n\n  if (address) {\n    const accountU8a = decodeAddress(address);\n    found = accounts.find(account => u8aEq(decodeAddress(account.address), accountU8a));\n  }\n\n  if (!found) {\n    throw new Error(`web3FromAddress: Unable to find injected ${address}`);\n  }\n\n  return web3FromSource(found.meta.source);\n} // retrieve all providers exposed by one source\n\nexport async function web3ListRpcProviders(source) {\n  const {\n    provider\n  } = await web3FromSource(source);\n\n  if (!provider) {\n    console.warn(`Extension ${source} does not expose any provider`);\n    return null;\n  }\n\n  return provider.listProviders();\n} // retrieve all providers exposed by one source\n\nexport async function web3UseRpcProvider(source, key) {\n  const {\n    provider\n  } = await web3FromSource(source);\n\n  if (!provider) {\n    throw new Error(`Extension ${source} does not expose any provider`);\n  }\n\n  const meta = await provider.startProvider(key);\n  return {\n    meta,\n    provider\n  };\n}"]},"metadata":{},"sourceType":"module"}